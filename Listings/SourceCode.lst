C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SOURCECODE
OBJECT MODULE PLACED IN .\Objects\SourceCode.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SourceCode.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUD
                    -E SYMBOLS PRINT(.\Listings\SourceCode.lst) TABS(2) PREPRINT(.\Listings\SourceCode.i) OBJECT(.\Objects\SourceCode.obj)

line level    source

   1          #include <reg51.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG51.H
   3      =1  
   4      =1  Header file for generic 80C51 and 80C31 microcontroller.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __REG51_H__
  10      =1  #define __REG51_H__
  11      =1  
  12      =1  /*  BYTE Register  */
  13      =1  sfr P0   = 0x80;
  14      =1  sfr P1   = 0x90;
  15      =1  sfr P2   = 0xA0;
  16      =1  sfr P3   = 0xB0;
  17      =1  sfr PSW  = 0xD0;
  18      =1  sfr ACC  = 0xE0;
  19      =1  sfr B    = 0xF0;
  20      =1  sfr SP   = 0x81;
  21      =1  sfr DPL  = 0x82;
  22      =1  sfr DPH  = 0x83;
  23      =1  sfr PCON = 0x87;
  24      =1  sfr TCON = 0x88;
  25      =1  sfr TMOD = 0x89;
  26      =1  sfr TL0  = 0x8A;
  27      =1  sfr TL1  = 0x8B;
  28      =1  sfr TH0  = 0x8C;
  29      =1  sfr TH1  = 0x8D;
  30      =1  sfr IE   = 0xA8;
  31      =1  sfr IP   = 0xB8;
  32      =1  sfr SCON = 0x98;
  33      =1  sfr SBUF = 0x99;
  34      =1  
  35      =1  
  36      =1  /*  BIT Register  */
  37      =1  /*  PSW   */
  38      =1  sbit CY   = 0xD7;
  39      =1  sbit AC   = 0xD6;
  40      =1  sbit F0   = 0xD5;
  41      =1  sbit RS1  = 0xD4;
  42      =1  sbit RS0  = 0xD3;
  43      =1  sbit OV   = 0xD2;
  44      =1  sbit P    = 0xD0;
  45      =1  
  46      =1  /*  TCON  */
  47      =1  sbit TF1  = 0x8F;
  48      =1  sbit TR1  = 0x8E;
  49      =1  sbit TF0  = 0x8D;
  50      =1  sbit TR0  = 0x8C;
  51      =1  sbit IE1  = 0x8B;
  52      =1  sbit IT1  = 0x8A;
  53      =1  sbit IE0  = 0x89;
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 2   

  54      =1  sbit IT0  = 0x88;
  55      =1  
  56      =1  /*  IE   */
  57      =1  sbit EA   = 0xAF;
  58      =1  sbit ES   = 0xAC;
  59      =1  sbit ET1  = 0xAB;
  60      =1  sbit EX1  = 0xAA;
  61      =1  sbit ET0  = 0xA9;
  62      =1  sbit EX0  = 0xA8;
  63      =1  
  64      =1  /*  IP   */ 
  65      =1  sbit PS   = 0xBC;
  66      =1  sbit PT1  = 0xBB;
  67      =1  sbit PX1  = 0xBA;
  68      =1  sbit PT0  = 0xB9;
  69      =1  sbit PX0  = 0xB8;
  70      =1  
  71      =1  /*  P3  */
  72      =1  sbit RD   = 0xB7;
  73      =1  sbit WR   = 0xB6;
  74      =1  sbit T1   = 0xB5;
  75      =1  sbit T0   = 0xB4;
  76      =1  sbit INT1 = 0xB3;
  77      =1  sbit INT0 = 0xB2;
  78      =1  sbit TXD  = 0xB1;
  79      =1  sbit RXD  = 0xB0;
  80      =1  
  81      =1  /*  SCON  */
  82      =1  sbit SM0  = 0x9F;
  83      =1  sbit SM1  = 0x9E;
  84      =1  sbit SM2  = 0x9D;
  85      =1  sbit REN  = 0x9C;
  86      =1  sbit TB8  = 0x9B;
  87      =1  sbit RB8  = 0x9A;
  88      =1  sbit TI   = 0x99;
  89      =1  sbit RI   = 0x98;
  90      =1  
  91      =1  #endif
   2          #include <stdio.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
  14      =1  #endif
  15      =1  
  16      =1  #ifndef NULL
  17      =1   #define NULL ((void *) 0)
  18      =1  #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
  21      =1   #define _SIZE_T
  22      =1   typedef unsigned int size_t;
  23      =1  #endif
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 3   

  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
   3          #include <string.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STRING.H
   3      =1  
   4      =1  String functions.
   5      =1  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =1  All rights reserved.
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __STRING_H__
  11      =1  #define __STRING_H__
  12      =1  
  13      =1  #ifndef _SIZE_T
           =1  #define _SIZE_T
           =1  typedef unsigned int size_t;
           =1 #endif
  17      =1  
  18      =1  #ifndef NULL
           =1  #define NULL ((void *)0)
           =1 #endif
  21      =1  
  22      =1  #pragma SAVE
  23      =1  #pragma REGPARMS
  24      =1  extern char  *strcat  (char *s1, const char *s2);
  25      =1  extern char  *strncat (char *s1, const char *s2, size_t n);
  26      =1  
  27      =1  extern char   strcmp  (const char *s1, const char *s2);
  28      =1  extern char   strncmp (const char *s1, const char *s2, size_t n);
  29      =1  
  30      =1  extern char  *strcpy  (char *s1, const char *s2);
  31      =1  extern char  *strncpy (char *s1, const char *s2, size_t n);
  32      =1  
  33      =1  extern size_t strlen  (const char *);
  34      =1  
  35      =1  extern char  *strchr  (const char *s, char c);
  36      =1  extern int    strpos  (const char *s, char c);
  37      =1  extern char  *strrchr (const char *s, char c);
  38      =1  extern int    strrpos (const char *s, char c);
  39      =1  
  40      =1  extern size_t strspn  (const char *s, const char *set);
  41      =1  extern size_t strcspn (const char *s, const char *set);
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 4   

  42      =1  extern char  *strpbrk (const char *s, const char *set);
  43      =1  extern char  *strrpbrk(const char *s, const char *set);
  44      =1  extern char  *strstr  (const char *s, const char *sub);
  45      =1  extern char  *strtok  (char *str, const char *set);
  46      =1  
  47      =1  extern char   memcmp  (const void *s1, const void *s2, size_t n);
  48      =1  extern void  *memcpy  (void *s1, const void *s2, size_t n);
  49      =1  extern void  *memchr  (const void *s, char val, size_t n);
  50      =1  extern void  *memccpy (void *s1, const void *s2, char val, size_t n);
  51      =1  extern void  *memmove (void *s1, const void *s2, size_t n);
  52      =1  extern void  *memset  (void *s, char val, size_t n);
  53      =1  #pragma RESTORE
  54      =1  
  55      =1  #endif
   4          #include <stdlib.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STDLIB.H
   3      =1  
   4      =1  Standard functions.
   5      =1  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =1  All rights reserved.
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __STDLIB_H__
  11      =1  #define __STDLIB_H__
  12      =1  
  13      =1  #ifndef _SIZE_T
           =1  #define _SIZE_T
           =1  typedef unsigned int size_t;
           =1 #endif
  17      =1  
  18      =1  #ifndef NULL
           =1  #define NULL ((void *)0)
           =1 #endif
  21      =1  
  22      =1  #ifndef _WCHAR_T_DEFINED_
  23      =1  #define _WCHAR_T_DEFINED_
  24      =1  typedef char wchar_t;
  25      =1  #endif
  26      =1  
  27      =1  #if defined (__CX2__)
           =1 #ifndef _DIV_T_DEFINED
           =1 typedef struct _div_t {
           =1         int quot;
           =1         int rem;
           =1 } div_t;
           =1 typedef struct _ldiv_t {
           =1         long quot;
           =1         long rem;
           =1 } ldiv_t;
           =1 #define _DIV_T_DEFINED
           =1 #endif // _DIV_T_DEFINED
           =1 #endif // __CX2__
  40      =1  
  41      =1  #ifndef RAND_MAX
  42      =1   #define RAND_MAX  32767u
  43      =1  #endif
  44      =1  
  45      =1  #if defined (__CX2__)
           =1 #pragma SAVE
           =1 #pragma FUNCTIONS(STATIC)
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 5   

           =1 /* intrinsic functions are reentrant, but need static attribute */
           =1 extern int    abs  (int   val);
           =1 #pragma RESTORE
           =1 #endif // __CX2__
  52      =1  
  53      =1  #pragma SAVE
  54      =1  #pragma REGPARMS
  55      =1  
  56      =1  extern char   cabs (char  val);
  57      =1  #if !defined (__CX2__)
  58      =1  extern int    abs  (int   val);
  59      =1  #endif // __CX2__
  60      =1  extern long   labs (long  val);
  61      =1  
  62      =1  extern float  atof (const char *s1);
  63      =1  extern long   atol (const char *s1);
  64      =1  extern int    atoi (const char *s1);
  65      =1  extern int    rand (void);
  66      =1  extern void   srand (unsigned int seed);
  67      =1  
  68      =1  #ifdef _DIV_T_DEFINED
           =1 extern div_t  __div (int numer, int denom);
           =1 #define div(numer,denom)  __div((numer),(denom));
           =1 extern ldiv_t ldiv (long numer, long denom);
           =1 #endif // _DIV_T_DEFINED
  73      =1  
  74      =1  extern float         strtod  (const char *nptr, char **endptr);
  75      =1  extern long          strtol  (const char *nptr, char **endptr, unsigned char base);
  76      =1  extern unsigned long strtoul (const char *nptr, char **endptr, unsigned char base);
  77      =1  
  78      =1  #define _MALLOC_MEM_  xdata
  79      =1  
  80      =1  extern void init_mempool          (void _MALLOC_MEM_ *p, size_t size);
  81      =1  extern void _MALLOC_MEM_ *malloc  (size_t size);
  82      =1  extern void free                  (void _MALLOC_MEM_ *p);
  83      =1  extern void _MALLOC_MEM_ *realloc (void _MALLOC_MEM_ *p, size_t size);
  84      =1  extern void _MALLOC_MEM_ *calloc  (size_t nmemb, size_t size);
  85      =1  
  86      =1  #if defined (__CX2__)
           =1 extern void abort(void);
           =1 #endif // __CX2__
  89      =1  
  90      =1  #pragma RESTORE
  91      =1  
  92      =1  #endif // __STDLIB_H__
   5          #define SegOne   0xf7 //Digit pertama 7segment
   6          #define SegTwo   0xfe //Digit kedua
   7          #define SegThree 0xfd //Digit ketiga
   8          #define SegFour  0xfb //Digit keempat
   9          sbit R1 = P1^0;     //Menghubungkan keypad dengan port 1
  10          sbit R2 = P1^1;
  11          sbit R3 = P1^2;
  12          sbit R4 = P1^3;
  13          sbit C1 = P1^4;
  14          sbit C2 = P1^5;
  15          sbit C3 = P1^6;
  16          sbit C4 = P1^7;
  17          int number1;
  18          int number2;
  19          int buffer;
  20          int angka1=0;
  21          int angka2=0;
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 6   

  22          int angka3=0;
  23          int angka4=0;
  24          int angka5=0;
  25          int hasil1;     //Variabel angka pertama
  26          int hasil2;     //Variabel angka kedua
  27          int hasilcount; //Variabel hasil
  28          
  29          void DELAY_ms(unsigned int ms_Count) //Menginisiasi delay
  30          {
  31   1          unsigned int i, j;
  32   1          for (i = 0; i < ms_Count; i++) 
  33   1          {
  34   2              for (j = 0; j < 100; j++);
  35   2          }
  36   1      }
  37          
  38          void concat1(int a, int b,int c,int d) //Menggabungkan 4 variabel angka menjadi 1 variabel
  39          {
  40   1        char s1[1];
  41   1        char s2[1];
  42   1        char s3[1];
  43   1        char s4[1];
  44   1          
  45   1        if(a !=0){
  46   2          sprintf(s1, "%d", a);
  47   2          sprintf(s2, "%d", b);
  48   2          sprintf(s3,"%d",c);
  49   2          sprintf(s4,"%d",d);
  50   2          strcat(s1, s2);
  51   2          strcat(s1,s3);
  52   2          strcat(s1,s4);
  53   2          DELAY_ms(200);
  54   2          hasil1= atoi(s1);
  55   2          DELAY_ms(200);
  56   2        }
  57   1        else{
  58   2          if(b !=0){
  59   3          sprintf(s2, "%d", b);
  60   3          sprintf(s3,"%d",c);
  61   3          sprintf(s4,"%d",d);
  62   3          strcat(s2,s3);
  63   3          strcat(s2,s4);
  64   3          DELAY_ms(200);
  65   3          hasil1= atoi(s2);
  66   3            DELAY_ms(200);
  67   3          }
  68   2          else{
  69   3            if(c !=0){
  70   4              sprintf(s3,"%d",c);
  71   4              sprintf(s4,"%d",d);
  72   4              strcat(s3,s4);
  73   4              DELAY_ms(200);
  74   4              hasil1= atoi(s3);
  75   4              DELAY_ms(200);
  76   4            }
  77   3            else{
  78   4              DELAY_ms(200);
  79   4              hasil1=d;
  80   4              DELAY_ms(200);
  81   4            }
  82   3          }
  83   2        }
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 7   

  84   1      }
  85          
  86          void concat2(int f, int g,int h,int i)  //Menggabungkan 4 variabel angka menjadi 1 variabel
  87          {
  88   1        char s5[1];
  89   1        char s6[1];
  90   1        char s7[1];
  91   1        char s8[1];
  92   1          
  93   1        if(f !=0){
  94   2          sprintf(s5, "%d", f);
  95   2          sprintf(s6, "%d", g);
  96   2          sprintf(s7,"%d",h);
  97   2          sprintf(s8,"%d",i);
  98   2          strcat(s5, s6);
  99   2          strcat(s5,s7);
 100   2          strcat(s5,s8);
 101   2          DELAY_ms(200);
 102   2          hasil2= atoi(s5);
 103   2          DELAY_ms(200);
 104   2        }
 105   1        else{
 106   2          if(g !=0){
 107   3          sprintf(s6, "%d", g);
 108   3          sprintf(s7,"%d",h);
 109   3          sprintf(s8,"%d",i);
 110   3          strcat(s6,s7);
 111   3          strcat(s6,s7);
 112   3            DELAY_ms(200);
 113   3          hasil2= atoi(s6);
 114   3            DELAY_ms(200);
 115   3          }
 116   2          else{
 117   3            if(h !=0){
 118   4              sprintf(s7,"%d",h);
 119   4              sprintf(s8,"%d",i);
 120   4              strcat(s7,s8);
 121   4              DELAY_ms(200);
 122   4              hasil2= atoi(s7);
 123   4              DELAY_ms(200);
 124   4            }
 125   3            else{
 126   4              DELAY_ms(200);
 127   4              hasil2=i;
 128   4              DELAY_ms(200);
 129   4            }
 130   3          }
 131   2        }
 132   1      }
 133          
 134          void push(int angka){ //Queue pada digit 7segment
 135   1        angka5=angka;DELAY_ms(50);
 136   1        buffer=angka2;DELAY_ms(50);
 137   1        angka1=buffer;DELAY_ms(50);
 138   1        buffer=angka3;DELAY_ms(50);
 139   1        angka2=buffer;DELAY_ms(50);
 140   1        buffer=angka4;DELAY_ms(50);
 141   1        angka3=buffer;DELAY_ms(50);
 142   1        buffer=angka5;DELAY_ms(50);
 143   1        angka4=buffer;DELAY_ms(50);
 144   1      }
 145          
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 8   

 146          int nthdig(int n, int k){ //Membagi 1 variabel angka menjadi 4 variabel angka
 147   1        while(n--)
 148   1          k/=10;
 149   1        return k%10;
 150   1      }
 151          
 152          void row_finder1() //Keypad kolom1
 153          {
 154   1        R1=R2=R3=R4=1;
 155   1        C1=C2=C3=C4=0;
 156   1      if(R1==0){push(7);DELAY_ms(200);}
 157   1      if(R2==0){push(4);DELAY_ms(200);}
 158   1      if(R3==0){push(1);DELAY_ms(200);}
 159   1      if(R4==0){ //Mereset calculator
 160   2        number1=0;
 161   2        number2=0;
 162   2        angka1=0;
 163   2        angka2=0;
 164   2        angka3=0;
 165   2        angka4=0;
 166   2        angka5=0;
 167   2        hasil1=0;
 168   2        hasil2=0;
 169   2        hasilcount=0;
 170   2        DELAY_ms(100);
 171   2      }
 172   1      }
 173          
 174          void row_finder2() //Keypad kolom2
 175          {
 176   1        R1=R2=R3=R4=1;
 177   1        C1=C2=C3=C4=0;
 178   1      if(R1==0){push(8);DELAY_ms(200);}
 179   1      if(R2==0){push(5);DELAY_ms(200);}
 180   1      if(R3==0){push(2);DELAY_ms(200);}
 181   1      if(R4==0){push(0);DELAY_ms(200);}
 182   1      }
 183          
 184          void row_finder3() //Keypad kolom3
 185          {
 186   1        R1=R2=R3=R4=1;
 187   1        C1=C2=C3=C4=0;
 188   1      if(R1==0){push(9);DELAY_ms(200);}
 189   1      if(R2==0){push(6);DELAY_ms(200);}
 190   1      if(R3==0){push(3);DELAY_ms(200);}
 191   1      if(R4==0){
 192   2        concat1(angka1,angka2,angka3,angka4);DELAY_ms(200);
 193   2        number1=0;
 194   2        number2=0;
 195   2        angka1=0;
 196   2        angka2=0;
 197   2        angka3=0;
 198   2        angka4=0;
 199   2        angka5=0;DELAY_ms(200);
 200   2      }
 201   1      }
 202          
 203          void row_finder4() //Keypad kolom4
 204          {
 205   1        R1=R2=R3=R4=1;
 206   1        C1=C2=C3=C4=0;
 207   1      
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 9   

 208   1      if(R1==0){
 209   2        concat2(angka1,angka2,angka3,angka4);
 210   2        DELAY_ms(200);
 211   2        hasilcount=hasil1/hasil2;
 212   2        DELAY_ms(200);
 213   2        angka1=nthdig(3,hasilcount);
 214   2        DELAY_ms(200);
 215   2        angka2=nthdig(2,hasilcount);
 216   2        DELAY_ms(200);
 217   2        angka3=nthdig(1,hasilcount);
 218   2        DELAY_ms(200);
 219   2        angka4=nthdig(0,hasilcount);
 220   2      }
 221   1      if(R2==0){  
 222   2        concat2(angka1,angka2,angka3,angka4);
 223   2        DELAY_ms(200);
 224   2        hasilcount=hasil1*hasil2;
 225   2        DELAY_ms(200);
 226   2        angka1=nthdig(3,hasilcount);
 227   2        DELAY_ms(200);
 228   2        angka2=nthdig(2,hasilcount);
 229   2        DELAY_ms(200);
 230   2        angka3=nthdig(1,hasilcount);
 231   2        DELAY_ms(200);
 232   2        angka4=nthdig(0,hasilcount);
 233   2      }
 234   1      if(R3==0){
 235   2        concat2(angka1,angka2,angka3,angka4);
 236   2        DELAY_ms(200);
 237   2        hasilcount=hasil1-hasil2;
 238   2        DELAY_ms(200);
 239   2        angka1=nthdig(3,hasilcount);
 240   2        DELAY_ms(200);
 241   2        angka2=nthdig(2,hasilcount);
 242   2        DELAY_ms(200);
 243   2        angka3=nthdig(1,hasilcount);
 244   2        DELAY_ms(200);
 245   2        angka4=nthdig(0,hasilcount);
 246   2      }
 247   1      if(R4==0){
 248   2        concat2(angka1,angka2,angka3,angka4);
 249   2        DELAY_ms(200);
 250   2        hasilcount=hasil1+hasil2;
 251   2        DELAY_ms(200);
 252   2        angka1=nthdig(3,hasilcount);
 253   2        DELAY_ms(200);
 254   2        angka2=nthdig(2,hasilcount);
 255   2        DELAY_ms(200);
 256   2        angka3=nthdig(1,hasilcount);
 257   2        DELAY_ms(200);
 258   2        angka4=nthdig(0,hasilcount);
 259   2      }
 260   1      }
 261          
 262          int main() {
 263   1      char hexvalue[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90}; //7segment 0 sampai 9
 264   1      number1=0;
 265   1      number2=0;
 266   1      angka1=0;
 267   1      angka2=0;
 268   1      angka3=0;
 269   1      angka4=0;
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 10  

 270   1      angka5=0;
 271   1      while (1) 
 272   1        {
 273   2          C1=C2=C3=C4=1;
 274   2          R1=R2=R3=R4=0;
 275   2          if(C1==0)
 276   2            row_finder1();
 277   2          else if(C2==0)
 278   2            row_finder2();
 279   2          else if(C3==0)
 280   2            row_finder3();
 281   2          else if(C4==0)
 282   2            row_finder4();
 283   2          P3 = SegOne; //menyalakan 7segment pertama
 284   2          P2 = hexvalue[angka1];               
 285   2          DELAY_ms(1);
 286   2          P3 = SegTwo; //menyalakan 7segment kedua
 287   2          P2 = hexvalue[angka2];               
 288   2          DELAY_ms(1);
 289   2          P3 = SegThree; //menyalakan 7segment ketiga
 290   2          P2 = hexvalue[angka3];               
 291   2          DELAY_ms(1);
 292   2          P3 = SegFour; //menyalakan 7segment keempat
 293   2          P2 = hexvalue[angka4];               
 294   2          DELAY_ms(1);
 295   2        }
 296   1      }
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION L?0065 (BEGIN)
0000 8E00        R     MOV     hasilcount,R6
0002 8F00        R     MOV     hasilcount+01H,R7
0004 7FC8              MOV     R7,#0C8H
0006 7E00              MOV     R6,#00H
0008         L?0066:
0008 120000      R     LCALL   _DELAY_ms
000B AD00        R     MOV     R5,hasilcount+01H
000D AC00        R     MOV     R4,hasilcount
000F 7F03              MOV     R7,#03H
0011 120000      R     LCALL   _nthdig
0014 8E00        R     MOV     angka1,R6
0016 8F00        R     MOV     angka1+01H,R7
0018 7FC8              MOV     R7,#0C8H
001A 7E00              MOV     R6,#00H
001C 120000      R     LCALL   _DELAY_ms
001F AD00        R     MOV     R5,hasilcount+01H
0021 AC00        R     MOV     R4,hasilcount
0023 7F02              MOV     R7,#02H
0025 120000      R     LCALL   _nthdig
0028 8E00        R     MOV     angka2,R6
002A 8F00        R     MOV     angka2+01H,R7
002C 7FC8              MOV     R7,#0C8H
002E 7E00              MOV     R6,#00H
0030 120000      R     LCALL   _DELAY_ms
0033 AD00        R     MOV     R5,hasilcount+01H
0035 AC00        R     MOV     R4,hasilcount
0037 7F01              MOV     R7,#01H
0039 120000      R     LCALL   _nthdig
003C 8E00        R     MOV     angka3,R6
003E 8F00        R     MOV     angka3+01H,R7
0040         L?0067:
0040 7FC8              MOV     R7,#0C8H
0042 7E00              MOV     R6,#00H
             ; FUNCTION _DELAY_ms (BEGIN)
                                           ; SOURCE LINE # 29
;---- Variable 'ms_Count' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 32
;---- Variable 'i' assigned to Register 'R4/R5' ----
0044 E4                CLR     A
0045 FD                MOV     R5,A
0046 FC                MOV     R4,A
0047         ?C0001:
0047 C3                CLR     C
0048 ED                MOV     A,R5
0049 9F                SUBB    A,R7
004A EC                MOV     A,R4
004B 9E                SUBB    A,R6
004C 5015              JNC     ?C0007
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
;---- Variable 'j' assigned to Register 'R2/R3' ----
004E E4                CLR     A
004F FB                MOV     R3,A
0050 FA                MOV     R2,A
0051         ?C0004:
0051 0B                INC     R3
0052 BB0001            CJNE    R3,#00H,?C0056
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 12  

0055 0A                INC     R2
0056         ?C0056:
0056 EB                MOV     A,R3
0057 6464              XRL     A,#064H
0059 4A                ORL     A,R2
005A 70F5              JNZ     ?C0004
                                           ; SOURCE LINE # 35
005C         ?C0003:
005C 0D                INC     R5
005D BD0001            CJNE    R5,#00H,?C0057
0060 0C                INC     R4
0061         ?C0057:
0061 80E4              SJMP    ?C0001
                                           ; SOURCE LINE # 36
0063         ?C0007:
0063 22                RET     
             ; FUNCTION _DELAY_ms (END)

             ; FUNCTION _concat1 (BEGIN)
                                           ; SOURCE LINE # 38
0000 8C00        R     MOV     b,R4
0002 8D00        R     MOV     b+01H,R5
0004 8A00        R     MOV     c,R2
0006 8B00        R     MOV     c+01H,R3
;---- Variable 'a' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 45
0008 EF                MOV     A,R7
0009 4E                ORL     A,R6
000A 7003              JNZ     $ + 5H
000C 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 46
000F 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0012 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
0015 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
0018 8E00        E     MOV     ?_sprintf?BYTE+06H,R6
001A 8F00        E     MOV     ?_sprintf?BYTE+07H,R7
001C 7B00              MOV     R3,#00H
001E 7A00        R     MOV     R2,#HIGH s1
0020 7900        R     MOV     R1,#LOW s1
0022 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 47
0025 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0028 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
002B 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
002E 850000      E     MOV     ?_sprintf?BYTE+06H,b
0031 850000      E     MOV     ?_sprintf?BYTE+07H,b+01H
0034 7B00              MOV     R3,#00H
0036 7A00        R     MOV     R2,#HIGH s2
0038 7900        R     MOV     R1,#LOW s2
003A 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 48
003D 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0040 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
0043 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
0046 850000      E     MOV     ?_sprintf?BYTE+06H,c
0049 850000      E     MOV     ?_sprintf?BYTE+07H,c+01H
004C 7B00              MOV     R3,#00H
004E 7A00        R     MOV     R2,#HIGH s3
0050 7900        R     MOV     R1,#LOW s3
0052 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 49
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 13  

0055 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0058 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
005B 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
005E 850000      E     MOV     ?_sprintf?BYTE+06H,d
0061 850000      E     MOV     ?_sprintf?BYTE+07H,d+01H
0064 7B00              MOV     R3,#00H
0066 7A00        R     MOV     R2,#HIGH s4
0068 7900        R     MOV     R1,#LOW s4
006A 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 50
006D 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0070 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s2
0073 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s2
0076 7B00              MOV     R3,#00H
0078 7A00        R     MOV     R2,#HIGH s1
007A 7900        R     MOV     R1,#LOW s1
007C 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 51
007F 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0082 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s3
0085 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s3
0088 7B00              MOV     R3,#00H
008A 7A00        R     MOV     R2,#HIGH s1
008C 7900        R     MOV     R1,#LOW s1
008E 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 52
0091 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0094 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s4
0097 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s4
009A 7B00              MOV     R3,#00H
009C 7A00        R     MOV     R2,#HIGH s1
009E 7900        R     MOV     R1,#LOW s1
00A0 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 53
00A3 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 54
00A6 7B00              MOV     R3,#00H
00A8 7A00        R     MOV     R2,#HIGH s1
00AA 7900        R     MOV     R1,#LOW s1
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
00AC 020000      R     LJMP    ?C0060
00AF         ?C0008:
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
00AF E500        R     MOV     A,b+01H
00B1 4500        R     ORL     A,b
00B3 6077              JZ      ?C0010
                                           ; SOURCE LINE # 59
00B5 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
00B8 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
00BB 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
00BE 850000      E     MOV     ?_sprintf?BYTE+06H,b
00C1 850000      E     MOV     ?_sprintf?BYTE+07H,b+01H
00C4 7B00              MOV     R3,#00H
00C6 7A00        R     MOV     R2,#HIGH s2
00C8 7900        R     MOV     R1,#LOW s2
00CA 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 60
00CD 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
00D0 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
00D3 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 14  

00D6 850000      E     MOV     ?_sprintf?BYTE+06H,c
00D9 850000      E     MOV     ?_sprintf?BYTE+07H,c+01H
00DC 7B00              MOV     R3,#00H
00DE 7A00        R     MOV     R2,#HIGH s3
00E0 7900        R     MOV     R1,#LOW s3
00E2 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 61
00E5 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
00E8 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
00EB 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
00EE 850000      E     MOV     ?_sprintf?BYTE+06H,d
00F1 850000      E     MOV     ?_sprintf?BYTE+07H,d+01H
00F4 7B00              MOV     R3,#00H
00F6 7A00        R     MOV     R2,#HIGH s4
00F8 7900        R     MOV     R1,#LOW s4
00FA 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 62
00FD 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0100 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s3
0103 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s3
0106 7B00              MOV     R3,#00H
0108 7A00        R     MOV     R2,#HIGH s2
010A 7900        R     MOV     R1,#LOW s2
010C 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 63
010F 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0112 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s4
0115 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s4
0118 7B00              MOV     R3,#00H
011A 7A00        R     MOV     R2,#HIGH s2
011C 7900        R     MOV     R1,#LOW s2
011E 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 64
0121 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 65
0124 7B00              MOV     R3,#00H
0126 7A00        R     MOV     R2,#HIGH s2
0128 7900        R     MOV     R1,#LOW s2
012A         ?C0059:
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
012A 8051              SJMP    ?C0060
012C         ?C0010:
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
012C E500        R     MOV     A,c+01H
012E 4500        R     ORL     A,c
0130 6058              JZ      ?C0012
                                           ; SOURCE LINE # 70
0132 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0135 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
0138 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
013B 850000      E     MOV     ?_sprintf?BYTE+06H,c
013E 850000      E     MOV     ?_sprintf?BYTE+07H,c+01H
0141 7B00              MOV     R3,#00H
0143 7A00        R     MOV     R2,#HIGH s3
0145 7900        R     MOV     R1,#LOW s3
0147 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 71
014A 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
014D 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
0150 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 15  

0153 850000      E     MOV     ?_sprintf?BYTE+06H,d
0156 850000      E     MOV     ?_sprintf?BYTE+07H,d+01H
0159 7B00              MOV     R3,#00H
015B 7A00        R     MOV     R2,#HIGH s4
015D 7900        R     MOV     R1,#LOW s4
015F 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 72
0162 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0165 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s4
0168 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s4
016B 7B00              MOV     R3,#00H
016D 7A00        R     MOV     R2,#HIGH s3
016F 7900        R     MOV     R1,#LOW s3
0171 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 73
0174 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 74
0177 7B00              MOV     R3,#00H
0179 7A00        R     MOV     R2,#HIGH s3
017B 7900        R     MOV     R1,#LOW s3
017D         ?C0060:
017D 120000      E     LCALL   _atoi
0180 8E00        R     MOV     hasil1,R6
0182 8F00        R     MOV     hasil1+01H,R7
                                           ; SOURCE LINE # 75
0184 7FC8              MOV     R7,#0C8H
0186 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 76
0188 8009              SJMP    ?C0061
018A         ?C0012:
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
018A 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 79
018D 850000      R     MOV     hasil1,d
0190 850000      R     MOV     hasil1+01H,d+01H
                                           ; SOURCE LINE # 80
0193         ?C0061:
0193 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
0196         ?C0014:
0196 22                RET     
             ; FUNCTION _concat1 (END)

             ; FUNCTION L?0068 (BEGIN)
0000         L?0069:
0000 850000      R     MOV     ?_concat2?BYTE+06H,angka4
0003 850000      R     MOV     ?_concat2?BYTE+07H,angka4+01H
0006 AB00        R     MOV     R3,angka3+01H
0008 AA00        R     MOV     R2,angka3
000A AD00        R     MOV     R5,angka2+01H
000C AC00        R     MOV     R4,angka2
000E AF00        R     MOV     R7,angka1+01H
0010 AE00        R     MOV     R6,angka1
             ; FUNCTION _concat2 (BEGIN)
                                           ; SOURCE LINE # 86
0012 8C00        R     MOV     g,R4
0014 8D00        R     MOV     g+01H,R5
0016 8A00        R     MOV     h,R2
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 16  

0018 8B00        R     MOV     h+01H,R3
;---- Variable 'f' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 93
001A EF                MOV     A,R7
001B 4E                ORL     A,R6
001C 7003              JNZ     $ + 5H
001E 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 94
0021 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0024 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
0027 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
002A 8E00        E     MOV     ?_sprintf?BYTE+06H,R6
002C 8F00        E     MOV     ?_sprintf?BYTE+07H,R7
002E 7B00              MOV     R3,#00H
0030 7A00        R     MOV     R2,#HIGH s5
0032 7900        R     MOV     R1,#LOW s5
0034 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 95
0037 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
003A 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
003D 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
0040 850000      E     MOV     ?_sprintf?BYTE+06H,g
0043 850000      E     MOV     ?_sprintf?BYTE+07H,g+01H
0046 7B00              MOV     R3,#00H
0048 7A00        R     MOV     R2,#HIGH s6
004A 7900        R     MOV     R1,#LOW s6
004C 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 96
004F 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0052 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
0055 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
0058 850000      E     MOV     ?_sprintf?BYTE+06H,h
005B 850000      E     MOV     ?_sprintf?BYTE+07H,h+01H
005E 7B00              MOV     R3,#00H
0060 7A00        R     MOV     R2,#HIGH s7
0062 7900        R     MOV     R1,#LOW s7
0064 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 97
0067 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
006A 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
006D 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
0070 850000      E     MOV     ?_sprintf?BYTE+06H,i
0073 850000      E     MOV     ?_sprintf?BYTE+07H,i+01H
0076 7B00              MOV     R3,#00H
0078 7A00        R     MOV     R2,#HIGH s8
007A 7900        R     MOV     R1,#LOW s8
007C 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 98
007F 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0082 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s6
0085 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s6
0088 7B00              MOV     R3,#00H
008A 7A00        R     MOV     R2,#HIGH s5
008C 7900        R     MOV     R1,#LOW s5
008E 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 99
0091 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0094 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s7
0097 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s7
009A 7B00              MOV     R3,#00H
009C 7A00        R     MOV     R2,#HIGH s5
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 17  

009E 7900        R     MOV     R1,#LOW s5
00A0 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 100
00A3 750000      E     MOV     ?_strcat?BYTE+03H,#00H
00A6 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s8
00A9 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s8
00AC 7B00              MOV     R3,#00H
00AE 7A00        R     MOV     R2,#HIGH s5
00B0 7900        R     MOV     R1,#LOW s5
00B2 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 101
00B5 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 102
00B8 7B00              MOV     R3,#00H
00BA 7A00        R     MOV     R2,#HIGH s5
00BC 7900        R     MOV     R1,#LOW s5
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
00BE 020000      R     LJMP    ?C0063
00C1         ?C0015:
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
00C1 E500        R     MOV     A,g+01H
00C3 4500        R     ORL     A,g
00C5 6077              JZ      ?C0017
                                           ; SOURCE LINE # 107
00C7 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
00CA 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
00CD 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
00D0 850000      E     MOV     ?_sprintf?BYTE+06H,g
00D3 850000      E     MOV     ?_sprintf?BYTE+07H,g+01H
00D6 7B00              MOV     R3,#00H
00D8 7A00        R     MOV     R2,#HIGH s6
00DA 7900        R     MOV     R1,#LOW s6
00DC 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 108
00DF 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
00E2 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
00E5 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
00E8 850000      E     MOV     ?_sprintf?BYTE+06H,h
00EB 850000      E     MOV     ?_sprintf?BYTE+07H,h+01H
00EE 7B00              MOV     R3,#00H
00F0 7A00        R     MOV     R2,#HIGH s7
00F2 7900        R     MOV     R1,#LOW s7
00F4 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 109
00F7 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
00FA 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
00FD 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
0100 850000      E     MOV     ?_sprintf?BYTE+06H,i
0103 850000      E     MOV     ?_sprintf?BYTE+07H,i+01H
0106 7B00              MOV     R3,#00H
0108 7A00        R     MOV     R2,#HIGH s8
010A 7900        R     MOV     R1,#LOW s8
010C 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 110
010F 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0112 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s7
0115 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s7
0118 7B00              MOV     R3,#00H
011A 7A00        R     MOV     R2,#HIGH s6
011C 7900        R     MOV     R1,#LOW s6
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 18  

011E 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 111
0121 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0124 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s7
0127 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s7
012A 7B00              MOV     R3,#00H
012C 7A00        R     MOV     R2,#HIGH s6
012E 7900        R     MOV     R1,#LOW s6
0130 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 112
0133 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 113
0136 7B00              MOV     R3,#00H
0138 7A00        R     MOV     R2,#HIGH s6
013A 7900        R     MOV     R1,#LOW s6
013C         ?C0062:
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
013C 8051              SJMP    ?C0063
013E         ?C0017:
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
013E E500        R     MOV     A,h+01H
0140 4500        R     ORL     A,h
0142 6058              JZ      ?C0019
                                           ; SOURCE LINE # 118
0144 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0147 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
014A 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
014D 850000      E     MOV     ?_sprintf?BYTE+06H,h
0150 850000      E     MOV     ?_sprintf?BYTE+07H,h+01H
0153 7B00              MOV     R3,#00H
0155 7A00        R     MOV     R2,#HIGH s7
0157 7900        R     MOV     R1,#LOW s7
0159 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 119
015C 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
015F 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_0
0162 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_0
0165 850000      E     MOV     ?_sprintf?BYTE+06H,i
0168 850000      E     MOV     ?_sprintf?BYTE+07H,i+01H
016B 7B00              MOV     R3,#00H
016D 7A00        R     MOV     R2,#HIGH s8
016F 7900        R     MOV     R1,#LOW s8
0171 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 120
0174 750000      E     MOV     ?_strcat?BYTE+03H,#00H
0177 750000      R     MOV     ?_strcat?BYTE+04H,#HIGH s8
017A 750000      R     MOV     ?_strcat?BYTE+05H,#LOW s8
017D 7B00              MOV     R3,#00H
017F 7A00        R     MOV     R2,#HIGH s7
0181 7900        R     MOV     R1,#LOW s7
0183 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 121
0186 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 122
0189 7B00              MOV     R3,#00H
018B 7A00        R     MOV     R2,#HIGH s7
018D 7900        R     MOV     R1,#LOW s7
018F         ?C0063:
018F 120000      E     LCALL   _atoi
0192 8E00        R     MOV     hasil2,R6
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 19  

0194 8F00        R     MOV     hasil2+01H,R7
                                           ; SOURCE LINE # 123
0196 7FC8              MOV     R7,#0C8H
0198 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 124
019A 8009              SJMP    ?C0064
019C         ?C0019:
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
019C 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 127
019F 850000      R     MOV     hasil2,i
01A2 850000      R     MOV     hasil2+01H,i+01H
                                           ; SOURCE LINE # 128
01A5         ?C0064:
01A5 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
01A8         ?C0021:
01A8 22                RET     
             ; FUNCTION _concat2 (END)

             ; FUNCTION _push (BEGIN)
                                           ; SOURCE LINE # 134
;---- Variable 'angka' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 135
0000 8E00        R     MOV     angka5,R6
0002 8F00        R     MOV     angka5+01H,R7
0004 7F32              MOV     R7,#032H
0006 7E00              MOV     R6,#00H
0008 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 136
000B 850000      R     MOV     buffer,angka2
000E 850000      R     MOV     buffer+01H,angka2+01H
0011 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 137
0014 850000      R     MOV     angka1,buffer
0017 850000      R     MOV     angka1+01H,buffer+01H
001A 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 138
001D 850000      R     MOV     buffer,angka3
0020 850000      R     MOV     buffer+01H,angka3+01H
0023 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 139
0026 850000      R     MOV     angka2,buffer
0029 850000      R     MOV     angka2+01H,buffer+01H
002C 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 140
002F 850000      R     MOV     buffer,angka4
0032 850000      R     MOV     buffer+01H,angka4+01H
0035 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 141
0038 850000      R     MOV     angka3,buffer
003B 850000      R     MOV     angka3+01H,buffer+01H
003E 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 142
0041 850000      R     MOV     buffer,angka5
0044 850000      R     MOV     buffer+01H,angka5+01H
0047 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 143
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 20  

004A 850000      R     MOV     angka4,buffer
004D 850000      R     MOV     angka4+01H,buffer+01H
0050 020000      R     LJMP    _DELAY_ms
             ; FUNCTION _push (END)

             ; FUNCTION L?0070 (BEGIN)
0000         L?0071:
0000 AD00        R     MOV     R5,hasilcount+01H
0002 AC00        R     MOV     R4,hasilcount
0004 E4                CLR     A
0005 FF                MOV     R7,A
             ; FUNCTION _nthdig (BEGIN)
                                           ; SOURCE LINE # 146
;---- Variable 'k' assigned to Register 'R2/R3' ----
0006 AB05              MOV     R3,AR5
0008 AA04              MOV     R2,AR4
;---- Variable 'n' assigned to Register 'DPTR' ----
000A 8F82              MOV     DPL,R7
000C 8E83              MOV     DPH,R6
000E         ?C0023:
                                           ; SOURCE LINE # 147
000E E582              MOV     A,DPL
0010 1582              DEC     DPL
0012 AE83              MOV     R6,DPH
0014 7002              JNZ     ?C0058
0016 1583              DEC     DPH
0018         ?C0058:
0018 4E                ORL     A,R6
0019 6011              JZ      ?C0024
                                           ; SOURCE LINE # 148
001B 7C00              MOV     R4,#00H
001D 7D0A              MOV     R5,#0AH
001F AF03              MOV     R7,AR3
0021 AE02              MOV     R6,AR2
0023 120000      E     LCALL   ?C?SIDIV
0026 AA06              MOV     R2,AR6
0028 AB07              MOV     R3,AR7
002A 80E2              SJMP    ?C0023
002C         ?C0024:
                                           ; SOURCE LINE # 149
002C AE02              MOV     R6,AR2
002E AF03              MOV     R7,AR3
0030 7C00              MOV     R4,#00H
0032 7D0A              MOV     R5,#0AH
0034 120000      E     LCALL   ?C?SIDIV
0037 AE04              MOV     R6,AR4
0039 AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 150
003B 22                RET     
             ; FUNCTION _nthdig (END)

             ; FUNCTION row_finder1 (BEGIN)
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0000 D293              SETB    R4
0002 D292              SETB    R3
0004 D291              SETB    R2
0006 D290              SETB    R1
                                           ; SOURCE LINE # 155
0008 C297              CLR     C4
000A C296              CLR     C3
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 21  

000C C295              CLR     C2
000E C294              CLR     C1
                                           ; SOURCE LINE # 156
0010 20900A            JB      R1,?C0026
0013 7F07              MOV     R7,#07H
0015 7E00              MOV     R6,#00H
0017 120000      R     LCALL   _push
001A 120000      R     LCALL   L?0067
001D         ?C0026:
                                           ; SOURCE LINE # 157
001D 20910A            JB      R2,?C0027
0020 7F04              MOV     R7,#04H
0022 7E00              MOV     R6,#00H
0024 120000      R     LCALL   _push
0027 120000      R     LCALL   L?0067
002A         ?C0027:
                                           ; SOURCE LINE # 158
002A 20920A            JB      R3,?C0028
002D 7F01              MOV     R7,#01H
002F 7E00              MOV     R6,#00H
0031 120000      R     LCALL   _push
0034 120000      R     LCALL   L?0067
0037         ?C0028:
                                           ; SOURCE LINE # 159
0037 20932F            JB      R4,?C0030
                                           ; SOURCE LINE # 160
003A E4                CLR     A
003B F500        R     MOV     number1,A
003D F500        R     MOV     number1+01H,A
                                           ; SOURCE LINE # 161
003F F500        R     MOV     number2,A
0041 F500        R     MOV     number2+01H,A
                                           ; SOURCE LINE # 162
0043 F500        R     MOV     angka1,A
0045 F500        R     MOV     angka1+01H,A
                                           ; SOURCE LINE # 163
0047 F500        R     MOV     angka2,A
0049 F500        R     MOV     angka2+01H,A
                                           ; SOURCE LINE # 164
004B F500        R     MOV     angka3,A
004D F500        R     MOV     angka3+01H,A
                                           ; SOURCE LINE # 165
004F F500        R     MOV     angka4,A
0051 F500        R     MOV     angka4+01H,A
                                           ; SOURCE LINE # 166
0053 F500        R     MOV     angka5,A
0055 F500        R     MOV     angka5+01H,A
                                           ; SOURCE LINE # 167
0057 F500        R     MOV     hasil1,A
0059 F500        R     MOV     hasil1+01H,A
                                           ; SOURCE LINE # 168
005B F500        R     MOV     hasil2,A
005D F500        R     MOV     hasil2+01H,A
                                           ; SOURCE LINE # 169
005F F500        R     MOV     hasilcount,A
0061 F500        R     MOV     hasilcount+01H,A
                                           ; SOURCE LINE # 170
0063 7F64              MOV     R7,#064H
0065 FE                MOV     R6,A
0066 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 22  

0069         ?C0030:
0069 22                RET     
             ; FUNCTION row_finder1 (END)

             ; FUNCTION row_finder2 (BEGIN)
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0000 D293              SETB    R4
0002 D292              SETB    R3
0004 D291              SETB    R2
0006 D290              SETB    R1
                                           ; SOURCE LINE # 177
0008 C297              CLR     C4
000A C296              CLR     C3
000C C295              CLR     C2
000E C294              CLR     C1
                                           ; SOURCE LINE # 178
0010 20900A            JB      R1,?C0031
0013 7F08              MOV     R7,#08H
0015 7E00              MOV     R6,#00H
0017 120000      R     LCALL   _push
001A 120000      R     LCALL   L?0067
001D         ?C0031:
                                           ; SOURCE LINE # 179
001D 20910A            JB      R2,?C0032
0020 7F05              MOV     R7,#05H
0022 7E00              MOV     R6,#00H
0024 120000      R     LCALL   _push
0027 120000      R     LCALL   L?0067
002A         ?C0032:
                                           ; SOURCE LINE # 180
002A 20920A            JB      R3,?C0033
002D 7F02              MOV     R7,#02H
002F 7E00              MOV     R6,#00H
0031 120000      R     LCALL   _push
0034 120000      R     LCALL   L?0067
0037         ?C0033:
                                           ; SOURCE LINE # 181
0037 209309            JB      R4,?C0035
003A E4                CLR     A
003B FF                MOV     R7,A
003C FE                MOV     R6,A
003D 120000      R     LCALL   _push
0040 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 182
0043         ?C0035:
0043 22                RET     
             ; FUNCTION row_finder2 (END)

             ; FUNCTION row_finder3 (BEGIN)
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
0000 D293              SETB    R4
0002 D292              SETB    R3
0004 D291              SETB    R2
0006 D290              SETB    R1
                                           ; SOURCE LINE # 187
0008 C297              CLR     C4
000A C296              CLR     C3
000C C295              CLR     C2
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 23  

000E C294              CLR     C1
                                           ; SOURCE LINE # 188
0010 20900A            JB      R1,?C0036
0013 7F09              MOV     R7,#09H
0015 7E00              MOV     R6,#00H
0017 120000      R     LCALL   _push
001A 120000      R     LCALL   L?0067
001D         ?C0036:
                                           ; SOURCE LINE # 189
001D 20910A            JB      R2,?C0037
0020 7F06              MOV     R7,#06H
0022 7E00              MOV     R6,#00H
0024 120000      R     LCALL   _push
0027 120000      R     LCALL   L?0067
002A         ?C0037:
                                           ; SOURCE LINE # 190
002A 20920A            JB      R3,?C0038
002D 7F03              MOV     R7,#03H
002F 7E00              MOV     R6,#00H
0031 120000      R     LCALL   _push
0034 120000      R     LCALL   L?0067
0037         ?C0038:
                                           ; SOURCE LINE # 191
0037 209338            JB      R4,?C0040
                                           ; SOURCE LINE # 192
003A 850000      R     MOV     ?_concat1?BYTE+06H,angka4
003D 850000      R     MOV     ?_concat1?BYTE+07H,angka4+01H
0040 AB00        R     MOV     R3,angka3+01H
0042 AA00        R     MOV     R2,angka3
0044 AD00        R     MOV     R5,angka2+01H
0046 AC00        R     MOV     R4,angka2
0048 AF00        R     MOV     R7,angka1+01H
004A AE00        R     MOV     R6,angka1
004C 120000      R     LCALL   _concat1
004F 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 193
0052 E4                CLR     A
0053 F500        R     MOV     number1,A
0055 F500        R     MOV     number1+01H,A
                                           ; SOURCE LINE # 194
0057 F500        R     MOV     number2,A
0059 F500        R     MOV     number2+01H,A
                                           ; SOURCE LINE # 195
005B F500        R     MOV     angka1,A
005D F500        R     MOV     angka1+01H,A
                                           ; SOURCE LINE # 196
005F F500        R     MOV     angka2,A
0061 F500        R     MOV     angka2+01H,A
                                           ; SOURCE LINE # 197
0063 F500        R     MOV     angka3,A
0065 F500        R     MOV     angka3+01H,A
                                           ; SOURCE LINE # 198
0067 F500        R     MOV     angka4,A
0069 F500        R     MOV     angka4+01H,A
                                           ; SOURCE LINE # 199
006B F500        R     MOV     angka5,A
006D F500        R     MOV     angka5+01H,A
006F 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
0072         ?C0040:
0072 22                RET     
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 24  

             ; FUNCTION row_finder3 (END)

             ; FUNCTION row_finder4 (BEGIN)
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
0000 D293              SETB    R4
0002 D292              SETB    R3
0004 D291              SETB    R2
0006 D290              SETB    R1
                                           ; SOURCE LINE # 206
0008 C297              CLR     C4
000A C296              CLR     C3
000C C295              CLR     C2
000E C294              CLR     C1
                                           ; SOURCE LINE # 208
0010 20901B            JB      R1,?C0041
                                           ; SOURCE LINE # 209
0013 120000      R     LCALL   L?0068
                                           ; SOURCE LINE # 210
0016 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 211
0019 AC00        R     MOV     R4,hasil2
001B AD00        R     MOV     R5,hasil2+01H
001D AE00        R     MOV     R6,hasil1
001F AF00        R     MOV     R7,hasil1+01H
0021 120000      E     LCALL   ?C?SIDIV
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0024 120000      R     LCALL   L?0065
                                           ; SOURCE LINE # 219
0027 120000      R     LCALL   L?0070
002A 8E00        R     MOV     angka4,R6
002C 8F00        R     MOV     angka4+01H,R7
                                           ; SOURCE LINE # 220
002E         ?C0041:
                                           ; SOURCE LINE # 221
002E 20911B            JB      R2,?C0042
                                           ; SOURCE LINE # 222
0031 120000      R     LCALL   L?0068
                                           ; SOURCE LINE # 223
0034 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 224
0037 AC00        R     MOV     R4,hasil2
0039 AD00        R     MOV     R5,hasil2+01H
003B AE00        R     MOV     R6,hasil1
003D AF00        R     MOV     R7,hasil1+01H
003F 120000      E     LCALL   ?C?IMUL
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
0042 120000      R     LCALL   L?0065
                                           ; SOURCE LINE # 232
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 25  

0045 120000      R     LCALL   L?0070
0048 8E00        R     MOV     angka4,R6
004A 8F00        R     MOV     angka4+01H,R7
                                           ; SOURCE LINE # 233
004C         ?C0042:
                                           ; SOURCE LINE # 234
004C 20921D            JB      R3,?C0043
                                           ; SOURCE LINE # 235
004F 120000      R     LCALL   L?0069
                                           ; SOURCE LINE # 236
0052 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 237
0055 C3                CLR     C
0056 E500        R     MOV     A,hasil1+01H
0058 9500        R     SUBB    A,hasil2+01H
005A F500        R     MOV     hasilcount+01H,A
005C E500        R     MOV     A,hasil1
005E 9500        R     SUBB    A,hasil2
0060 F500        R     MOV     hasilcount,A
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
0062 120000      R     LCALL   L?0066
                                           ; SOURCE LINE # 245
0065 120000      R     LCALL   L?0071
0068 8E00        R     MOV     angka4,R6
006A 8F00        R     MOV     angka4+01H,R7
                                           ; SOURCE LINE # 246
006C         ?C0043:
                                           ; SOURCE LINE # 247
006C 20931C            JB      R4,?C0045
                                           ; SOURCE LINE # 248
006F 120000      R     LCALL   L?0069
                                           ; SOURCE LINE # 249
0072 120000      R     LCALL   L?0067
                                           ; SOURCE LINE # 250
0075 E500        R     MOV     A,hasil1+01H
0077 2500        R     ADD     A,hasil2+01H
0079 F500        R     MOV     hasilcount+01H,A
007B E500        R     MOV     A,hasil1
007D 3500        R     ADDC    A,hasil2
007F F500        R     MOV     hasilcount,A
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0081 120000      R     LCALL   L?0066
                                           ; SOURCE LINE # 258
0084 120000      R     LCALL   L?0071
0087 8E00        R     MOV     angka4,R6
0089 8F00        R     MOV     angka4+01H,R7
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
008B         ?C0045:
008B 22                RET     
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 26  

             ; FUNCTION row_finder4 (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
0000 7800        R     MOV     R0,#LOW hexvalue
0002 7C00        R     MOV     R4,#HIGH hexvalue
0004 7D00              MOV     R5,#00H
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH _?ix1000
000A 7900        R     MOV     R1,#LOW _?ix1000
000C 7E00              MOV     R6,#00H
000E 7F0A              MOV     R7,#0AH
0010 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 264
0013 E4                CLR     A
0014 F500        R     MOV     number1,A
0016 F500        R     MOV     number1+01H,A
                                           ; SOURCE LINE # 265
0018 F500        R     MOV     number2,A
001A F500        R     MOV     number2+01H,A
                                           ; SOURCE LINE # 266
001C F500        R     MOV     angka1,A
001E F500        R     MOV     angka1+01H,A
                                           ; SOURCE LINE # 267
0020 F500        R     MOV     angka2,A
0022 F500        R     MOV     angka2+01H,A
                                           ; SOURCE LINE # 268
0024 F500        R     MOV     angka3,A
0026 F500        R     MOV     angka3+01H,A
                                           ; SOURCE LINE # 269
0028 F500        R     MOV     angka4,A
002A F500        R     MOV     angka4+01H,A
                                           ; SOURCE LINE # 270
002C F500        R     MOV     angka5,A
002E F500        R     MOV     angka5+01H,A
0030         ?C0046:
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0030 D297              SETB    C4
0032 D296              SETB    C3
0034 D295              SETB    C2
0036 D294              SETB    C1
                                           ; SOURCE LINE # 274
0038 C293              CLR     R4
003A C292              CLR     R3
003C C291              CLR     R2
003E C290              CLR     R1
                                           ; SOURCE LINE # 275
0040 209405            JB      C1,?C0048
                                           ; SOURCE LINE # 276
0043 120000      R     LCALL   row_finder1
0046 8016              SJMP    ?C0049
0048         ?C0048:
                                           ; SOURCE LINE # 277
0048 209505            JB      C2,?C0050
                                           ; SOURCE LINE # 278
004B 120000      R     LCALL   row_finder2
004E 800E              SJMP    ?C0049
0050         ?C0050:
                                           ; SOURCE LINE # 279
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 27  

0050 209605            JB      C3,?C0052
                                           ; SOURCE LINE # 280
0053 120000      R     LCALL   row_finder3
0056 8006              SJMP    ?C0049
0058         ?C0052:
                                           ; SOURCE LINE # 281
0058 209703            JB      C4,?C0049
                                           ; SOURCE LINE # 282
005B 120000      R     LCALL   row_finder4
005E         ?C0049:
                                           ; SOURCE LINE # 283
005E 75B0F7            MOV     P3,#0F7H
                                           ; SOURCE LINE # 284
0061 7400        R     MOV     A,#LOW hexvalue
0063 2500        R     ADD     A,angka1+01H
0065 F8                MOV     R0,A
0066 E6                MOV     A,@R0
0067 F5A0              MOV     P2,A
                                           ; SOURCE LINE # 285
0069 7F01              MOV     R7,#01H
006B 7E00              MOV     R6,#00H
006D 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 286
0070 75B0FE            MOV     P3,#0FEH
                                           ; SOURCE LINE # 287
0073 7400        R     MOV     A,#LOW hexvalue
0075 2500        R     ADD     A,angka2+01H
0077 F8                MOV     R0,A
0078 E6                MOV     A,@R0
0079 F5A0              MOV     P2,A
                                           ; SOURCE LINE # 288
007B 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 289
007E 75B0FD            MOV     P3,#0FDH
                                           ; SOURCE LINE # 290
0081 7400        R     MOV     A,#LOW hexvalue
0083 2500        R     ADD     A,angka3+01H
0085 F8                MOV     R0,A
0086 E6                MOV     A,@R0
0087 F5A0              MOV     P2,A
                                           ; SOURCE LINE # 291
0089 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 292
008C 75B0FB            MOV     P3,#0FBH
                                           ; SOURCE LINE # 293
008F 7400        R     MOV     A,#LOW hexvalue
0091 2500        R     ADD     A,angka4+01H
0093 F8                MOV     R0,A
0094 E6                MOV     A,@R0
0095 F5A0              MOV     P2,A
                                           ; SOURCE LINE # 294
0097 120000      R     LCALL   _DELAY_ms
                                           ; SOURCE LINE # 295
009A 8094              SJMP    ?C0046
             ; FUNCTION main (END)

C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 28  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
_nthdig. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0006H  -----
  n. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0082H  2
  k. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0002H  2
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
R1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
R2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
R3 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
R4 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_strcat. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  hexvalue . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0000H  10
_concat1 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  a. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0006H  2
  b. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0002H  2
  c. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0004H  2
  d. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0006H  2
  s1 . . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0008H  1
  s2 . . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0009H  1
  s3 . . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    000AH  1
  s4 . . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    000BH  1
_concat2 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0012H  -----
  f. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0006H  2
  g. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0002H  2
  h. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0004H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   INT      0006H  2
  s5 . . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0008H  1
  s6 . . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    0009H  1
  s7 . . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    000AH  1
  s8 . . . . . . . . . . . . . . . . .  AUTO     DATA   ARRAY    000BH  1
_atoi. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_DELAY_ms. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0044H  -----
  ms_Count . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
angka1 . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0000H  2
angka2 . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0002H  2
angka3 . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0004H  2
angka4 . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0006H  2
angka5 . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0008H  2
number1. . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      000AH  2
number2. . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      000CH  2
hasilcount . . . . . . . . . . . . . .  PUBLIC   DATA   INT      000EH  2
_push. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  angka. . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
_?ix1000 . . . . . . . . . . . . . . .  STATIC   CODE   ARRAY    0003H  10
hasil1 . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0010H  2
hasil2 . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0012H  2
row_finder1. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
row_finder2. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
row_finder3. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
row_finder4. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
wchar_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
C1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
C51 COMPILER V9.60.0.0   SOURCECODE                                                        06/07/2021 21:33:05 PAGE 29  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


C2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
C3 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
C4 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
buffer . . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0014H  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1660    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22      34
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
